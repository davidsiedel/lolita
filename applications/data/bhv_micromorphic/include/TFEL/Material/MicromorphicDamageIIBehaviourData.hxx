/*!
* \file   TFEL/Material/MicromorphicDamageIIBehaviourData.hxx
* \brief  this file implements the MicromorphicDamageIIBehaviourData class.
*         File generated by tfel version 4.0.0-dev
* \author Thomas Helfer , Jérémy Bleyer
* \date   21 / 09 / 2021
 */

#ifndef LIB_TFELMATERIAL_MICROMORPHICDAMAGEII_BEHAVIOUR_DATA_HXX
#define LIB_TFELMATERIAL_MICROMORPHICDAMAGEII_BEHAVIOUR_DATA_HXX

#include<limits>
#include<string>
#include<sstream>
#include<iostream>
#include<stdexcept>
#include<algorithm>

#include"TFEL/Raise.hxx"
#include"TFEL/PhysicalConstants.hxx"
#include"TFEL/Config/TFELConfig.hxx"
#include"TFEL/Config/TFELTypes.hxx"
#include"TFEL/TypeTraits/IsFundamentalNumericType.hxx"
#include"TFEL/TypeTraits/IsReal.hxx"
#include"TFEL/Math/General/Abs.hxx"
#include"TFEL/Math/General/IEEE754.hxx"
#include"TFEL/Math/Array/ViewsArrayIO.hxx"
#include"TFEL/Math/Array/fsarrayIO.hxx"
#include"TFEL/Math/Array/runtime_arrayIO.hxx"
#include"TFEL/Math/fsarray.hxx"
#include"TFEL/Math/runtime_array.hxx"
#include"TFEL/Math/stensor.hxx"
#include"TFEL/Math/Stensor/StensorConceptIO.hxx"
#include"TFEL/Math/tmatrix.hxx"
#include"TFEL/Math/Matrix/tmatrixIO.hxx"
#include"TFEL/Math/st2tost2.hxx"
#include"TFEL/Math/ST2toST2/ST2toST2ConceptIO.hxx"
#include"TFEL/Math/tensor.hxx"
#include"TFEL/Math/Tensor/TensorConceptIO.hxx"
#include"TFEL/Math/t2tot2.hxx"
#include"TFEL/Math/T2toT2/T2toT2ConceptIO.hxx"
#include"TFEL/Math/t2tost2.hxx"
#include"TFEL/Math/T2toST2/T2toST2ConceptIO.hxx"
#include"TFEL/Math/st2tot2.hxx"
#include"TFEL/Math/ST2toT2/ST2toT2ConceptIO.hxx"
#include"TFEL/Math/ST2toST2/ConvertToTangentModuli.hxx"
#include"TFEL/Math/ST2toST2/ConvertSpatialModuliToKirchhoffJaumanRateModuli.hxx"
#include"TFEL/Material/FiniteStrainBehaviourTangentOperator.hxx"
#include"TFEL/Material/ModellingHypothesis.hxx"

#include "MFront/GenericBehaviour/State.hxx"
#include "MFront/GenericBehaviour/BehaviourData.hxx"
namespace tfel::material{

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename,bool>
class MicromorphicDamageIIBehaviourData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType,bool use_qt>
class MicromorphicDamageIIIntegrationData;

//! \brief forward declaration
template<ModellingHypothesis::Hypothesis hypothesis,typename NumericType>
std::ostream&
 operator <<(std::ostream&,const MicromorphicDamageIIBehaviourData<hypothesis, NumericType,false>&);

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
class MicromorphicDamageIIBehaviourData<hypothesis, NumericType,false>
{

static constexpr unsigned short N = ModellingHypothesisToSpaceDimension<hypothesis>::value;
static_assert(N==1||N==2||N==3);
static_assert(tfel::typetraits::IsFundamentalNumericType<NumericType>::cond);
static_assert(tfel::typetraits::IsReal<NumericType>::cond);

friend std::ostream& operator<< <>(std::ostream&,const MicromorphicDamageIIBehaviourData&);

/* integration data is declared friend to access   driving variables at the beginning of the time step */
friend class MicromorphicDamageIIIntegrationData<hypothesis, NumericType, false>;

static constexpr unsigned short TVectorSize = N;
typedef tfel::math::StensorDimeToSize<N> StensorDimeToSize;
static constexpr unsigned short StensorSize = StensorDimeToSize::value;
typedef tfel::math::TensorDimeToSize<N> TensorDimeToSize;
static constexpr unsigned short TensorSize = TensorDimeToSize::value;

using ushort =  unsigned short;
using Types = tfel::config::Types<N, NumericType, false>;
using Type = NumericType;
using real = typename Types::real;
using time = typename Types::time;
using length = typename Types::length;
using frequency = typename Types::frequency;
using speed = typename Types::speed;
using stress = typename Types::stress;
using strain = typename Types::strain;
using strainrate = typename Types::strainrate;
using stressrate = typename Types::stressrate;
using temperature = typename Types::temperature;
using thermalexpansion = typename Types::thermalexpansion;
using thermalconductivity = typename Types::thermalconductivity;
using massdensity = typename Types::massdensity;
using energydensity = typename Types::energydensity;
using TVector = typename Types::TVector;
using DisplacementTVector = typename Types::DisplacementTVector;
using ForceTVector = typename Types::ForceTVector;
using HeatFlux = typename Types::HeatFlux;
using TemperatureGradient = typename Types::TemperatureGradient;
using Stensor = typename Types::Stensor;
using StressStensor = typename Types::StressStensor;
using StressRateStensor = typename Types::StressRateStensor;
using StrainStensor = typename Types::StrainStensor;
using StrainRateStensor = typename Types::StrainRateStensor;
using FrequencyStensor = typename Types::FrequencyStensor;
using Tensor = typename Types::Tensor;
using DeformationGradientTensor = typename Types::DeformationGradientTensor;
using StressTensor = typename Types::StressTensor;
using StiffnessTensor = typename Types::StiffnessTensor;
using Stensor4 = typename Types::Stensor4;
using TangentOperator = tfel::math::tvector<(TVectorSize)*(TVectorSize)+(1)*(1),real>;
using PhysicalConstants = tfel::PhysicalConstants<NumericType, false>;

protected:

TVector tum_2207__dtum_03C7__;

TVector b;

real dtum_03C7__;

real a;

#line 18 "bhv_micromorphic_damage.mfront"
real Gc;
#line 20 "bhv_micromorphic_damage.mfront"
real l;
#line 22 "bhv_micromorphic_damage.mfront"
real beta;

#line 25 "bhv_micromorphic_damage.mfront"
real d;
#line 28 "bhv_micromorphic_damage.mfront"
stress Yd;
#line 30 "bhv_micromorphic_damage.mfront"
stress Ytum_03C7__;
#line 32 "bhv_micromorphic_damage.mfront"
stress Ytum_2207__dtum_03C7__;
temperature T;
#line 35 "bhv_micromorphic_damage.mfront"
stress Y;

public:

/*!
* \brief Default constructor
*/
MicromorphicDamageIIBehaviourData()
{}

/*!
* \brief copy constructor
*/
MicromorphicDamageIIBehaviourData(const MicromorphicDamageIIBehaviourData& src)
: tum_2207__dtum_03C7__(src.tum_2207__dtum_03C7__),
b(src.b),
dtum_03C7__(src.dtum_03C7__),
a(src.a),
Gc(src.Gc),
l(src.l),
beta(src.beta),
d(src.d),
Yd(src.Yd),
Ytum_03C7__(src.Ytum_03C7__),
Ytum_2207__dtum_03C7__(src.Ytum_2207__dtum_03C7__),
T(src.T),
Y(src.Y)
{}

/*
 * \brief constructor for the Generic interface
 * \param[in] mgb_d: behaviour data
 */
MicromorphicDamageIIBehaviourData(const mfront::gb::BehaviourData& mgb_d)
: Gc(mgb_d.s1.material_properties[0]),
l(mgb_d.s1.material_properties[1]),
beta(mgb_d.s1.material_properties[2]),
d(mgb_d.s0.internal_state_variables[0]),
Yd(mgb_d.s0.internal_state_variables[1]),
Ytum_03C7__(mgb_d.s0.internal_state_variables[2]),
Ytum_2207__dtum_03C7__(mgb_d.s0.internal_state_variables[3]),
T(mgb_d.s0.external_state_variables[0]),
Y(mgb_d.s0.external_state_variables[1])
{
}


/*
* \brief Assignement operator
*/
MicromorphicDamageIIBehaviourData&
operator=(const MicromorphicDamageIIBehaviourData& src){
this->tum_2207__dtum_03C7__ = src.tum_2207__dtum_03C7__;
this->b = src.b;
this->dtum_03C7__ = src.dtum_03C7__;
this->a = src.a;
this->Gc = src.Gc;
this->l = src.l;
this->beta = src.beta;
this->d = src.d;
this->Yd = src.Yd;
this->Ytum_03C7__ = src.Ytum_03C7__;
this->Ytum_2207__dtum_03C7__ = src.Ytum_2207__dtum_03C7__;
this->T = src.T;
this->Y = src.Y;
return *this;
}

void exportStateData(mfront::gb::State& mbg_s1) const
{
using namespace tfel::math;
tfel::math::map<TVector>(mbg_s1.thermodynamic_forces) = this->b;
mbg_s1.thermodynamic_forces[TVectorSize] = this->a;
mbg_s1.internal_state_variables[0] = this->d;
mbg_s1.internal_state_variables[1] = this->Yd;
mbg_s1.internal_state_variables[2] = this->Ytum_03C7__;
mbg_s1.internal_state_variables[3] = this->Ytum_2207__dtum_03C7__;
} // end of exportStateData

}; // end of MicromorphicDamageIIBehaviourDataclass

template<ModellingHypothesis::Hypothesis hypothesis, typename NumericType>
std::ostream&
operator <<(std::ostream& os,const MicromorphicDamageIIBehaviourData<hypothesis, NumericType, false>& b)
{
os << "∇dχ : " << b.tum_2207__dtum_03C7__ << '\n';
os << "b : " << b.b << '\n';
os << "dχ : " << b.dtum_03C7__ << '\n';
os << "a : " << b.a << '\n';
os << "Gc : " << b.Gc << '\n';
os << "l : " << b.l << '\n';
os << "beta : " << b.beta << '\n';
os << "d : " << b.d << '\n';
os << "Yd : " << b.Yd << '\n';
os << "Yχ : " << b.Ytum_03C7__ << '\n';
os << "Y∇dχ : " << b.Ytum_2207__dtum_03C7__ << '\n';
os << "T : " << b.T << '\n';
os << "Y : " << b.Y << '\n';
return os;
}

} // end of namespace tfel::material

#endif /* LIB_TFELMATERIAL_MICROMORPHICDAMAGEII_BEHAVIOUR_DATA_HXX */
